{"version":3,"file":"static/js/68.180fc514.chunk.js","mappings":"yQAEaA,EAAYC,EAAAA,GAAAA,IAAH,kH,SCMTC,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACtB,GAAsBC,EAAAA,EAAAA,UAAS,MAA/B,eAAOC,EAAP,KAAYC,EAAZ,KAEMC,GAAQC,EAAAA,EAAAA,SAAO,GAEbC,EAAkCN,EAAlCM,UAAWC,EAAuBP,EAAvBO,KAAMC,EAAiBR,EAAjBQ,aAqBzB,OAnBAC,EAAAA,EAAAA,YAAU,WACJD,GACFE,EAAAA,EAAAA,IAASF,GACNG,MAAK,WACJR,EAAO,kCAAD,OAAmCK,GAC1C,IACAI,OAAM,WACLT,EAAOU,EACR,IACAC,SAAQ,WACPV,EAAMW,SAAU,CACjB,KAEHZ,EAAOU,GACPT,EAAMW,SAAU,EAGnB,GAAE,CAACP,KAGF,UAACX,EAAD,YACE,wBAAKU,IACJH,EAAMW,SAAU,gBAAKC,IAAKd,EAAKe,IAAKV,EAAMW,MAAM,SAAW,SAACC,EAAA,EAAD,KAC5D,uBAAIb,MAGT,ECvCYT,EAAYC,EAAAA,GAAAA,IAAH,sGCoDtB,EA5Ca,WACX,IAAQsB,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAAwBnB,EAAAA,EAAAA,UAAS,IAAjC,eAAOqB,EAAP,KAAaC,EAAb,KACA,GAA8BtB,EAAAA,EAAAA,WAAS,GAAvC,eAAOuB,EAAP,KAAgBC,EAAhB,KAEMC,GAAcrB,EAAAA,EAAAA,SAAO,GAiB3B,OAfAI,EAAAA,EAAAA,YAAU,WACJiB,EAAYX,UACdW,EAAYX,SAAU,GACtBY,EAAAA,EAAAA,IAAmBP,EAAS,YACzBT,MAAK,SAAAiB,GACJ,IAAKA,EAASC,KAAKP,KACjB,MAAM,IAAIQ,MAAM,gDAClBP,EAAQK,EAASC,KAAKP,KACvB,IACAV,OAAM,SAAAmB,GAAK,OAAIC,EAAAA,GAAAA,MAAA,oCAAyCD,GAA7C,IACXjB,QAAQW,GAAW,IAGzB,GAAE,CAACL,KAGF,UAAC,EAAD,WACGI,GACC,SAACL,EAAA,EAAD,KAEA,eAAIc,UAAU,SAAd,gBACGX,QADH,IACGA,OADH,EACGA,EAAMY,KAAI,SAAAlC,GACT,IAAQmC,EAAYnC,EAAZmC,QACR,OACE,yBACE,SAACpC,EAAD,CAAOC,MAAOA,KADPmC,EAIZ,OAGL,SAAC,KAAD,MAGL,C","sources":["components/Actor/Actor.styled.js","components/Actor/Actor.jsx","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n  width: 110px;\n  & h3 {\n    font-size: 12px;\n  }\n  & p {\n    font-size: 10px;\n  }\n`;\n","import { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getImage } from 'utils/api';\nimport { Loader } from 'components/Loader/Loader';\nimport noimage500x750 from '../../images/noimage500x750.png';\nimport { Container } from './Actor.styled';\n\nexport const Actor = ({ actor }) => {\n  const [img, setImg] = useState(null);\n\n  const isImg = useRef(false);\n\n  const { character, name, profile_path } = actor;\n\n  useEffect(() => {\n    if (profile_path) {\n      getImage(profile_path)\n        .then(() => {\n          setImg(`https://image.tmdb.org/t/p/w500${profile_path}`);\n        })\n        .catch(() => {\n          setImg(noimage500x750);\n        })\n        .finally(() => {\n          isImg.current = true;\n        });\n    } else {\n      setImg(noimage500x750);\n      isImg.current = true;\n    }\n    return;\n  }, [profile_path]);\n\n  return (\n    <Container>\n      <h3>{name}</h3>\n      {isImg.current ? <img src={img} alt={name} width=\"100\" /> : <Loader />}\n      <p>{character}</p>\n    </Container>\n  );\n};\n\nActor.propTypes = {\n  actor: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    profile_path: PropTypes.string,\n    character: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  & .actors {\n    display: flex;\n    gap: 10px;\n    flex-wrap: wrap;\n  }\n`;\n","import { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Toaster, toast } from 'react-hot-toast';\n\nimport { Actor } from 'components/Actor/Actor';\nimport { Loader } from 'components/Loader/Loader';\n\nimport { getResponseDetails } from 'utils/api';\nimport { Container } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n\n  const [cast, setCast] = useState([]);\n  const [pending, setPending] = useState(true);\n\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      getResponseDetails(movieId, '/credits')\n        .then(response => {\n          if (!response.data.cast)\n            throw new Error('Sorry but something wrong, we cant load cast');\n          setCast(response.data.cast);\n        })\n        .catch(error => toast.error(`Sorry, we can get a cast: ${error}`))\n        .finally(setPending(false));\n    }\n    return;\n  }, [movieId]);\n\n  return (\n    <Container>\n      {pending ? (\n        <Loader />\n      ) : (\n        <ul className=\"actors\">\n          {cast?.map(actor => {\n            const { cast_id } = actor;\n            return (\n              <li key={cast_id}>\n                <Actor actor={actor} />\n              </li>\n            );\n          })}\n        </ul>\n      )}\n      <Toaster />\n    </Container>\n  );\n};\n\nexport default Cast;\n"],"names":["Container","styled","Actor","actor","useState","img","setImg","isImg","useRef","character","name","profile_path","useEffect","getImage","then","catch","noimage500x750","finally","current","src","alt","width","Loader","movieId","useParams","cast","setCast","pending","setPending","firstRender","getResponseDetails","response","data","Error","error","toast","className","map","cast_id"],"sourceRoot":""}