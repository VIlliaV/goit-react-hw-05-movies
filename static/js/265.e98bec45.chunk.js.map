{"version":3,"file":"static/js/265.e98bec45.chunk.js","mappings":"8OAEaA,EAAW,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACjBC,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,QAEhB,OACE,iCACE,0CAAgBD,MAChB,uBAAIC,MAGT,E,iBCTYC,E,OAAYC,GAAAA,IAAH,sBCuDtB,EA/CgB,WACd,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEMC,GAAcC,EAAAA,EAAAA,SAAO,GAiB3B,OAfAC,EAAAA,EAAAA,YAAU,WACJF,EAAYG,UACdH,EAAYG,SAAU,GACtBC,EAAAA,EAAAA,IAAmBX,EAAS,YACzBY,MAAK,SAAAjB,GACJ,IAAKA,EAASkB,KAAKC,QACjB,MAAM,IAAIC,MAAM,mDACdpB,EAASkB,KAAKC,QAAQE,QAAQZ,EAAWT,EAASkB,KAAKC,QAC5D,IACAG,OAAM,SAAAC,GAAK,OAAIC,EAAAA,GAAAA,MAAA,uCAA4CD,GAAhD,IACXE,QAAQd,GAAW,IAGzB,GAAE,CAACN,KAGF,UAACF,EAAD,WACGO,GACC,SAACgB,EAAA,EAAD,KAEA,wBACGlB,EAAQa,OACPb,EAAQmB,KAAI,SAAA3B,GACV,IAAQ4B,EAAO5B,EAAP4B,GACR,OACE,yBACE,SAAC7B,EAAD,CAAUC,SAAUA,KADb4B,EAIZ,KAED,wEAIN,SAAC,KAAD,MAGL,C","sources":["components/Response/Response.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const Response = ({ response }) => {\n  const { author, content } = response;\n\n  return (\n    <>\n      <h3>{`Author: ${author}`}</h3>\n      <p>{content}</p>\n    </>\n  );\n};\n\nResponse.propTypes = {\n  actor: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n    content: PropTypes.string.isRequired,\n  }),\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div``;\n","import { useEffect, useRef, useState } from 'react';\nimport { Toaster, toast } from 'react-hot-toast';\nimport { useParams } from 'react-router-dom';\n\nimport { Loader } from 'components/Loader/Loader';\nimport { Response } from 'components/Response/Response';\n\nimport { getResponseDetails } from 'utils/api';\nimport { Container } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [pending, setPending] = useState(true);\n\n  const firstRender = useRef(true);\n\n  useEffect(() => {\n    if (firstRender.current) {\n      firstRender.current = false;\n      getResponseDetails(movieId, '/reviews')\n        .then(response => {\n          if (!response.data.results)\n            throw new Error('Sorry but something wrong, we cant load reviews');\n          if (response.data.results.length) setReviews(response.data.results);\n        })\n        .catch(error => toast.error(`Sorry, we can get a reviews: ${error}`))\n        .finally(setPending(false));\n    }\n    return;\n  }, [movieId]);\n\n  return (\n    <Container>\n      {pending ? (\n        <Loader />\n      ) : (\n        <ul>\n          {reviews.length ? (\n            reviews.map(response => {\n              const { id } = response;\n              return (\n                <li key={id}>\n                  <Response response={response} />\n                </li>\n              );\n            })\n          ) : (\n            <p>We don't have any reviews for this movie.</p>\n          )}\n        </ul>\n      )}\n      <Toaster />\n    </Container>\n  );\n};\n\nexport default Reviews;\n"],"names":["Response","response","author","content","Container","styled","movieId","useParams","useState","reviews","setReviews","pending","setPending","firstRender","useRef","useEffect","current","getResponseDetails","then","data","results","Error","length","catch","error","toast","finally","Loader","map","id"],"sourceRoot":""}